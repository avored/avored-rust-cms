// This file is @generated by prost-build.
/// Security Audit Models
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecurityAuditModel {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub security_audit_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub admin_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "5")]
    pub ip_address: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "6")]
    pub user_agent: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub endpoint: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub request_method: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, tag = "9")]
    pub total_authentication_attempts: i32,
    #[prost(int32, tag = "10")]
    pub failed_authentication_attempts: i32,
    #[prost(int32, tag = "11")]
    pub blocked_injection_attempts: i32,
    #[prost(int32, tag = "12")]
    pub rate_limited_requests: i32,
    #[prost(int32, tag = "13")]
    pub suspicious_activities_detected: i32,
    #[prost(int32, tag = "14")]
    pub security_violations: i32,
    #[prost(int32, tag = "15")]
    pub uptime_seconds: i32,
    #[prost(double, tag = "16")]
    pub security_health_score: f64,
    #[prost(message, optional, tag = "17")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "18")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
    /// JSON string for metadata
    #[prost(string, optional, tag = "19")]
    pub metadata_json: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSecurityAuditModel {
    #[prost(string, tag = "1")]
    pub security_audit_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub admin_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "4")]
    pub ip_address: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "5")]
    pub user_agent: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub endpoint: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub request_method: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "8")]
    pub total_authentication_attempts: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub failed_authentication_attempts: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub blocked_injection_attempts: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub rate_limited_requests: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "12")]
    pub suspicious_activities_detected: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "13")]
    pub security_violations: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "14")]
    pub uptime_seconds: ::core::option::Option<i32>,
    #[prost(double, optional, tag = "15")]
    pub security_health_score: ::core::option::Option<f64>,
    /// JSON string for metadata
    #[prost(string, optional, tag = "16")]
    pub metadata_json: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateSecurityAuditModel {
    #[prost(int32, optional, tag = "1")]
    pub total_authentication_attempts: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub failed_authentication_attempts: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub blocked_injection_attempts: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub rate_limited_requests: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub suspicious_activities_detected: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub security_violations: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub uptime_seconds: ::core::option::Option<i32>,
    #[prost(double, optional, tag = "8")]
    pub security_health_score: ::core::option::Option<f64>,
    /// JSON string for metadata
    #[prost(string, optional, tag = "9")]
    pub metadata_json: ::core::option::Option<::prost::alloc::string::String>,
}
/// Security Alert Models
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SecurityAlertModel {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub alert_id: ::prost::alloc::string::String,
    #[prost(enumeration = "AlertType", tag = "3")]
    pub alert_type: i32,
    #[prost(enumeration = "AlertSeverity", tag = "4")]
    pub severity: i32,
    #[prost(string, tag = "5")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub source: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "7")]
    pub affected_resource: ::core::option::Option<::prost::alloc::string::String>,
    /// JSON string for metadata
    #[prost(string, optional, tag = "8")]
    pub metadata_json: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, tag = "9")]
    pub resolved: bool,
    #[prost(message, optional, tag = "10")]
    pub resolved_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, optional, tag = "11")]
    pub resolved_by: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "12")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CreateSecurityAlertModel {
    #[prost(string, tag = "1")]
    pub alert_id: ::prost::alloc::string::String,
    #[prost(enumeration = "AlertType", tag = "2")]
    pub alert_type: i32,
    #[prost(enumeration = "AlertSeverity", tag = "3")]
    pub severity: i32,
    #[prost(string, tag = "4")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub source: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "6")]
    pub affected_resource: ::core::option::Option<::prost::alloc::string::String>,
    /// JSON string for metadata
    #[prost(string, optional, tag = "7")]
    pub metadata_json: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UpdateSecurityAlertModel {
    #[prost(bool, optional, tag = "1")]
    pub resolved: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "2")]
    pub resolved_by: ::core::option::Option<::prost::alloc::string::String>,
    /// JSON string for metadata
    #[prost(string, optional, tag = "3")]
    pub metadata_json: ::core::option::Option<::prost::alloc::string::String>,
}
/// Pagination
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Pagination {
    #[prost(int64, tag = "1")]
    pub total: i64,
    #[prost(int64, tag = "2")]
    pub per_page: i64,
    #[prost(int64, tag = "3")]
    pub current_page: i64,
    #[prost(int64, tag = "4")]
    pub from: i64,
    #[prost(int64, tag = "5")]
    pub to: i64,
    #[prost(bool, tag = "6")]
    pub has_next_page: bool,
    #[prost(bool, tag = "7")]
    pub has_previous_page: bool,
    #[prost(int64, tag = "8")]
    pub next_page_number: i64,
    #[prost(int64, tag = "9")]
    pub previous_page_number: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecurityAuditPaginationModel {
    #[prost(message, repeated, tag = "1")]
    pub data: ::prost::alloc::vec::Vec<SecurityAuditModel>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<Pagination>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecurityAlertPaginationModel {
    #[prost(message, repeated, tag = "1")]
    pub data: ::prost::alloc::vec::Vec<SecurityAlertModel>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<Pagination>,
}
/// Security Summary Models
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecuritySummary {
    #[prost(string, tag = "1")]
    pub ip_address: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub total_records: i64,
    #[prost(int32, tag = "3")]
    pub total_authentication_attempts: i32,
    #[prost(int32, tag = "4")]
    pub failed_authentication_attempts: i32,
    #[prost(int32, tag = "5")]
    pub blocked_injection_attempts: i32,
    #[prost(int32, tag = "6")]
    pub rate_limited_requests: i32,
    #[prost(int32, tag = "7")]
    pub suspicious_activities_detected: i32,
    #[prost(int32, tag = "8")]
    pub security_violations: i32,
    #[prost(double, tag = "9")]
    pub lowest_health_score: f64,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AlertStatistics {
    #[prost(int64, tag = "1")]
    pub total_alerts: i64,
    #[prost(int64, tag = "2")]
    pub total_unresolved: i64,
    #[prost(int64, tag = "3")]
    pub total_critical_unresolved: i64,
    #[prost(int64, tag = "4")]
    pub total_low: i64,
    #[prost(int64, tag = "5")]
    pub total_medium: i64,
    #[prost(int64, tag = "6")]
    pub total_high: i64,
    #[prost(int64, tag = "7")]
    pub total_critical: i64,
}
/// Security Audit Service Requests/Responses
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSecurityAuditRequest {
    #[prost(message, optional, tag = "1")]
    pub audit: ::core::option::Option<CreateSecurityAuditModel>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSecurityAuditResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SecurityAuditModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LogSecurityEventRequest {
    #[prost(string, optional, tag = "1")]
    pub admin_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "3")]
    pub ip_address: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "4")]
    pub user_agent: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub endpoint: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub request_method: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration = "SecurityEventType", tag = "7")]
    pub event_type: i32,
    #[prost(string, optional, tag = "8")]
    pub metadata_json: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogSecurityEventResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SecurityAuditModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetSecurityAuditRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecurityAuditResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SecurityAuditModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetSecurityAuditsByUserRequest {
    #[prost(string, tag = "1")]
    pub admin_user_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub page: i64,
    #[prost(int64, tag = "3")]
    pub per_page: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecurityAuditsByUserResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SecurityAuditPaginationModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetSecurityAuditsByIpRequest {
    #[prost(string, tag = "1")]
    pub ip_address: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub page: i64,
    #[prost(int64, tag = "3")]
    pub per_page: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecurityAuditsByIpResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SecurityAuditPaginationModel>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetSecurityAuditsPaginatedRequest {
    #[prost(int64, tag = "1")]
    pub page: i64,
    #[prost(int64, tag = "2")]
    pub per_page: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecurityAuditsPaginatedResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SecurityAuditPaginationModel>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateSecurityAuditRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub audit: ::core::option::Option<UpdateSecurityAuditModel>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateSecurityAuditResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SecurityAuditModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeleteSecurityAuditRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeleteSecurityAuditResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetIpSecuritySummaryRequest {
    #[prost(string, tag = "1")]
    pub ip_address: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIpSecuritySummaryResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SecuritySummary>,
}
/// Security Alert Service Requests/Responses
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CreateSecurityAlertRequest {
    #[prost(message, optional, tag = "1")]
    pub alert: ::core::option::Option<CreateSecurityAlertModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CreateSecurityAlertResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SecurityAlertModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CreateSecurityAlertAutoIdRequest {
    #[prost(enumeration = "AlertType", tag = "1")]
    pub alert_type: i32,
    #[prost(enumeration = "AlertSeverity", tag = "2")]
    pub severity: i32,
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub source: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "5")]
    pub affected_resource: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub metadata_json: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CreateSecurityAlertAutoIdResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SecurityAlertModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetSecurityAlertRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetSecurityAlertResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SecurityAlertModel>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetUnresolvedAlertsBySeverityRequest {
    #[prost(enumeration = "AlertSeverity", tag = "1")]
    pub severity: i32,
    #[prost(int64, tag = "2")]
    pub page: i64,
    #[prost(int64, tag = "3")]
    pub per_page: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUnresolvedAlertsBySeverityResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SecurityAlertPaginationModel>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetAlertsByTypeRequest {
    #[prost(enumeration = "AlertType", tag = "1")]
    pub alert_type: i32,
    #[prost(int64, tag = "2")]
    pub page: i64,
    #[prost(int64, tag = "3")]
    pub per_page: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAlertsByTypeResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SecurityAlertPaginationModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetAlertsBySourceRequest {
    #[prost(string, tag = "1")]
    pub source: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub page: i64,
    #[prost(int64, tag = "3")]
    pub per_page: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAlertsBySourceResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SecurityAlertPaginationModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ResolveSecurityAlertRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub resolved_by: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ResolveSecurityAlertResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SecurityAlertModel>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetSecurityAlertsPaginatedRequest {
    #[prost(int64, tag = "1")]
    pub page: i64,
    #[prost(int64, tag = "2")]
    pub per_page: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecurityAlertsPaginatedResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SecurityAlertPaginationModel>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetCriticalUnresolvedAlertsRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCriticalUnresolvedAlertsResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, repeated, tag = "2")]
    pub data: ::prost::alloc::vec::Vec<SecurityAlertModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeleteSecurityAlertRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeleteSecurityAlertResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetAlertStatisticsRequest {}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetAlertStatisticsResponse {
    #[prost(bool, tag = "1")]
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<AlertStatistics>,
}
/// Enums
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AlertType {
    Unspecified = 0,
    AuthenticationFailure = 1,
    InjectionAttempt = 2,
    RateLimitExceeded = 3,
    SuspiciousActivity = 4,
    PrivilegeEscalation = 5,
    DataBreachAttempt = 6,
    UnauthorizedAccess = 7,
    MalformedRequest = 8,
    BruteForceAttack = 9,
    SessionHijacking = 10,
}
impl AlertType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "ALERT_TYPE_UNSPECIFIED",
            Self::AuthenticationFailure => "AUTHENTICATION_FAILURE",
            Self::InjectionAttempt => "INJECTION_ATTEMPT",
            Self::RateLimitExceeded => "RATE_LIMIT_EXCEEDED",
            Self::SuspiciousActivity => "SUSPICIOUS_ACTIVITY",
            Self::PrivilegeEscalation => "PRIVILEGE_ESCALATION",
            Self::DataBreachAttempt => "DATA_BREACH_ATTEMPT",
            Self::UnauthorizedAccess => "UNAUTHORIZED_ACCESS",
            Self::MalformedRequest => "MALFORMED_REQUEST",
            Self::BruteForceAttack => "BRUTE_FORCE_ATTACK",
            Self::SessionHijacking => "SESSION_HIJACKING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ALERT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "AUTHENTICATION_FAILURE" => Some(Self::AuthenticationFailure),
            "INJECTION_ATTEMPT" => Some(Self::InjectionAttempt),
            "RATE_LIMIT_EXCEEDED" => Some(Self::RateLimitExceeded),
            "SUSPICIOUS_ACTIVITY" => Some(Self::SuspiciousActivity),
            "PRIVILEGE_ESCALATION" => Some(Self::PrivilegeEscalation),
            "DATA_BREACH_ATTEMPT" => Some(Self::DataBreachAttempt),
            "UNAUTHORIZED_ACCESS" => Some(Self::UnauthorizedAccess),
            "MALFORMED_REQUEST" => Some(Self::MalformedRequest),
            "BRUTE_FORCE_ATTACK" => Some(Self::BruteForceAttack),
            "SESSION_HIJACKING" => Some(Self::SessionHijacking),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AlertSeverity {
    Unspecified = 0,
    Low = 1,
    Medium = 2,
    High = 3,
    Critical = 4,
}
impl AlertSeverity {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "ALERT_SEVERITY_UNSPECIFIED",
            Self::Low => "LOW",
            Self::Medium => "MEDIUM",
            Self::High => "HIGH",
            Self::Critical => "CRITICAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ALERT_SEVERITY_UNSPECIFIED" => Some(Self::Unspecified),
            "LOW" => Some(Self::Low),
            "MEDIUM" => Some(Self::Medium),
            "HIGH" => Some(Self::High),
            "CRITICAL" => Some(Self::Critical),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SecurityEventType {
    Unspecified = 0,
    AuthenticationSuccess = 1,
    AuthenticationFailureEvent = 2,
    InjectionAttemptEvent = 3,
    RateLimitExceededEvent = 4,
    SuspiciousActivityEvent = 5,
    SecurityViolationEvent = 6,
}
impl SecurityEventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "SECURITY_EVENT_TYPE_UNSPECIFIED",
            Self::AuthenticationSuccess => "AUTHENTICATION_SUCCESS",
            Self::AuthenticationFailureEvent => "AUTHENTICATION_FAILURE_EVENT",
            Self::InjectionAttemptEvent => "INJECTION_ATTEMPT_EVENT",
            Self::RateLimitExceededEvent => "RATE_LIMIT_EXCEEDED_EVENT",
            Self::SuspiciousActivityEvent => "SUSPICIOUS_ACTIVITY_EVENT",
            Self::SecurityViolationEvent => "SECURITY_VIOLATION_EVENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SECURITY_EVENT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "AUTHENTICATION_SUCCESS" => Some(Self::AuthenticationSuccess),
            "AUTHENTICATION_FAILURE_EVENT" => Some(Self::AuthenticationFailureEvent),
            "INJECTION_ATTEMPT_EVENT" => Some(Self::InjectionAttemptEvent),
            "RATE_LIMIT_EXCEEDED_EVENT" => Some(Self::RateLimitExceededEvent),
            "SUSPICIOUS_ACTIVITY_EVENT" => Some(Self::SuspiciousActivityEvent),
            "SECURITY_VIOLATION_EVENT" => Some(Self::SecurityViolationEvent),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod security_audit_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Services
    #[derive(Debug, Clone)]
    pub struct SecurityAuditClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl SecurityAuditClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> SecurityAuditClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> SecurityAuditClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            SecurityAuditClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn create_security_audit(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateSecurityAuditRequest>,
        ) -> Result<
            tonic::Response<super::CreateSecurityAuditResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAudit/CreateSecurityAudit",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "security_audit.SecurityAudit",
                        "CreateSecurityAudit",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn log_security_event(
            &mut self,
            request: impl tonic::IntoRequest<super::LogSecurityEventRequest>,
        ) -> Result<
            tonic::Response<super::LogSecurityEventResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAudit/LogSecurityEvent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("security_audit.SecurityAudit", "LogSecurityEvent"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_security_audit(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSecurityAuditRequest>,
        ) -> Result<
            tonic::Response<super::GetSecurityAuditResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAudit/GetSecurityAudit",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("security_audit.SecurityAudit", "GetSecurityAudit"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_security_audits_by_user(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSecurityAuditsByUserRequest>,
        ) -> Result<
            tonic::Response<super::GetSecurityAuditsByUserResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAudit/GetSecurityAuditsByUser",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "security_audit.SecurityAudit",
                        "GetSecurityAuditsByUser",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_security_audits_by_ip(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSecurityAuditsByIpRequest>,
        ) -> Result<
            tonic::Response<super::GetSecurityAuditsByIpResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAudit/GetSecurityAuditsByIp",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "security_audit.SecurityAudit",
                        "GetSecurityAuditsByIp",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_security_audits_paginated(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSecurityAuditsPaginatedRequest>,
        ) -> Result<
            tonic::Response<super::GetSecurityAuditsPaginatedResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAudit/GetSecurityAuditsPaginated",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "security_audit.SecurityAudit",
                        "GetSecurityAuditsPaginated",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_security_audit(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateSecurityAuditRequest>,
        ) -> Result<
            tonic::Response<super::UpdateSecurityAuditResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAudit/UpdateSecurityAudit",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "security_audit.SecurityAudit",
                        "UpdateSecurityAudit",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_security_audit(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteSecurityAuditRequest>,
        ) -> Result<
            tonic::Response<super::DeleteSecurityAuditResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAudit/DeleteSecurityAudit",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "security_audit.SecurityAudit",
                        "DeleteSecurityAudit",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_ip_security_summary(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIpSecuritySummaryRequest>,
        ) -> Result<
            tonic::Response<super::GetIpSecuritySummaryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAudit/GetIpSecuritySummary",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "security_audit.SecurityAudit",
                        "GetIpSecuritySummary",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod security_audit_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with SecurityAuditServer.
    #[async_trait]
    pub trait SecurityAudit: Send + Sync + 'static {
        async fn create_security_audit(
            &self,
            request: tonic::Request<super::CreateSecurityAuditRequest>,
        ) -> Result<
            tonic::Response<super::CreateSecurityAuditResponse>,
            tonic::Status,
        >;
        async fn log_security_event(
            &self,
            request: tonic::Request<super::LogSecurityEventRequest>,
        ) -> Result<
            tonic::Response<super::LogSecurityEventResponse>,
            tonic::Status,
        >;
        async fn get_security_audit(
            &self,
            request: tonic::Request<super::GetSecurityAuditRequest>,
        ) -> Result<
            tonic::Response<super::GetSecurityAuditResponse>,
            tonic::Status,
        >;
        async fn get_security_audits_by_user(
            &self,
            request: tonic::Request<super::GetSecurityAuditsByUserRequest>,
        ) -> Result<
            tonic::Response<super::GetSecurityAuditsByUserResponse>,
            tonic::Status,
        >;
        async fn get_security_audits_by_ip(
            &self,
            request: tonic::Request<super::GetSecurityAuditsByIpRequest>,
        ) -> Result<
            tonic::Response<super::GetSecurityAuditsByIpResponse>,
            tonic::Status,
        >;
        async fn get_security_audits_paginated(
            &self,
            request: tonic::Request<super::GetSecurityAuditsPaginatedRequest>,
        ) -> Result<
            tonic::Response<super::GetSecurityAuditsPaginatedResponse>,
            tonic::Status,
        >;
        async fn update_security_audit(
            &self,
            request: tonic::Request<super::UpdateSecurityAuditRequest>,
        ) -> Result<
            tonic::Response<super::UpdateSecurityAuditResponse>,
            tonic::Status,
        >;
        async fn delete_security_audit(
            &self,
            request: tonic::Request<super::DeleteSecurityAuditRequest>,
        ) -> Result<
            tonic::Response<super::DeleteSecurityAuditResponse>,
            tonic::Status,
        >;
        async fn get_ip_security_summary(
            &self,
            request: tonic::Request<super::GetIpSecuritySummaryRequest>,
        ) -> Result<
            tonic::Response<super::GetIpSecuritySummaryResponse>,
            tonic::Status,
        >;
    }
    /// Services
    #[derive(Debug)]
    pub struct SecurityAuditServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> SecurityAuditServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> Service<http::Request<B>> for SecurityAuditServer<T>
    where
        T: SecurityAudit,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/security_audit.SecurityAudit/CreateSecurityAudit" => {
                    #[allow(non_camel_case_types)]
                    struct CreateSecurityAuditSvc<T: SecurityAudit>(pub Arc<T>);
                    impl<
                        T: SecurityAudit,
                    > tonic::server::UnaryService<super::CreateSecurityAuditRequest>
                    for CreateSecurityAuditSvc<T> {
                        type Response = super::CreateSecurityAuditResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateSecurityAuditRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAudit>::create_security_audit(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateSecurityAuditSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAudit/LogSecurityEvent" => {
                    #[allow(non_camel_case_types)]
                    struct LogSecurityEventSvc<T: SecurityAudit>(pub Arc<T>);
                    impl<
                        T: SecurityAudit,
                    > tonic::server::UnaryService<super::LogSecurityEventRequest>
                    for LogSecurityEventSvc<T> {
                        type Response = super::LogSecurityEventResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LogSecurityEventRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAudit>::log_security_event(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LogSecurityEventSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAudit/GetSecurityAudit" => {
                    #[allow(non_camel_case_types)]
                    struct GetSecurityAuditSvc<T: SecurityAudit>(pub Arc<T>);
                    impl<
                        T: SecurityAudit,
                    > tonic::server::UnaryService<super::GetSecurityAuditRequest>
                    for GetSecurityAuditSvc<T> {
                        type Response = super::GetSecurityAuditResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetSecurityAuditRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAudit>::get_security_audit(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSecurityAuditSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAudit/GetSecurityAuditsByUser" => {
                    #[allow(non_camel_case_types)]
                    struct GetSecurityAuditsByUserSvc<T: SecurityAudit>(pub Arc<T>);
                    impl<
                        T: SecurityAudit,
                    > tonic::server::UnaryService<super::GetSecurityAuditsByUserRequest>
                    for GetSecurityAuditsByUserSvc<T> {
                        type Response = super::GetSecurityAuditsByUserResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetSecurityAuditsByUserRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAudit>::get_security_audits_by_user(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSecurityAuditsByUserSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAudit/GetSecurityAuditsByIp" => {
                    #[allow(non_camel_case_types)]
                    struct GetSecurityAuditsByIpSvc<T: SecurityAudit>(pub Arc<T>);
                    impl<
                        T: SecurityAudit,
                    > tonic::server::UnaryService<super::GetSecurityAuditsByIpRequest>
                    for GetSecurityAuditsByIpSvc<T> {
                        type Response = super::GetSecurityAuditsByIpResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetSecurityAuditsByIpRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAudit>::get_security_audits_by_ip(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSecurityAuditsByIpSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAudit/GetSecurityAuditsPaginated" => {
                    #[allow(non_camel_case_types)]
                    struct GetSecurityAuditsPaginatedSvc<T: SecurityAudit>(pub Arc<T>);
                    impl<
                        T: SecurityAudit,
                    > tonic::server::UnaryService<
                        super::GetSecurityAuditsPaginatedRequest,
                    > for GetSecurityAuditsPaginatedSvc<T> {
                        type Response = super::GetSecurityAuditsPaginatedResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetSecurityAuditsPaginatedRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAudit>::get_security_audits_paginated(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSecurityAuditsPaginatedSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAudit/UpdateSecurityAudit" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateSecurityAuditSvc<T: SecurityAudit>(pub Arc<T>);
                    impl<
                        T: SecurityAudit,
                    > tonic::server::UnaryService<super::UpdateSecurityAuditRequest>
                    for UpdateSecurityAuditSvc<T> {
                        type Response = super::UpdateSecurityAuditResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateSecurityAuditRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAudit>::update_security_audit(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateSecurityAuditSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAudit/DeleteSecurityAudit" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteSecurityAuditSvc<T: SecurityAudit>(pub Arc<T>);
                    impl<
                        T: SecurityAudit,
                    > tonic::server::UnaryService<super::DeleteSecurityAuditRequest>
                    for DeleteSecurityAuditSvc<T> {
                        type Response = super::DeleteSecurityAuditResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteSecurityAuditRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAudit>::delete_security_audit(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteSecurityAuditSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAudit/GetIpSecuritySummary" => {
                    #[allow(non_camel_case_types)]
                    struct GetIpSecuritySummarySvc<T: SecurityAudit>(pub Arc<T>);
                    impl<
                        T: SecurityAudit,
                    > tonic::server::UnaryService<super::GetIpSecuritySummaryRequest>
                    for GetIpSecuritySummarySvc<T> {
                        type Response = super::GetIpSecuritySummaryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetIpSecuritySummaryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAudit>::get_ip_security_summary(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetIpSecuritySummarySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for SecurityAuditServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "security_audit.SecurityAudit";
    impl<T> tonic::server::NamedService for SecurityAuditServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated client implementations.
pub mod security_alert_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct SecurityAlertClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl SecurityAlertClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> SecurityAlertClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> SecurityAlertClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            SecurityAlertClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn create_security_alert(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateSecurityAlertRequest>,
        ) -> Result<
            tonic::Response<super::CreateSecurityAlertResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAlert/CreateSecurityAlert",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "security_audit.SecurityAlert",
                        "CreateSecurityAlert",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_security_alert_auto_id(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateSecurityAlertAutoIdRequest>,
        ) -> Result<
            tonic::Response<super::CreateSecurityAlertAutoIdResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAlert/CreateSecurityAlertAutoId",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "security_audit.SecurityAlert",
                        "CreateSecurityAlertAutoId",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_security_alert(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSecurityAlertRequest>,
        ) -> Result<
            tonic::Response<super::GetSecurityAlertResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAlert/GetSecurityAlert",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("security_audit.SecurityAlert", "GetSecurityAlert"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_unresolved_alerts_by_severity(
            &mut self,
            request: impl tonic::IntoRequest<super::GetUnresolvedAlertsBySeverityRequest>,
        ) -> Result<
            tonic::Response<super::GetUnresolvedAlertsBySeverityResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAlert/GetUnresolvedAlertsBySeverity",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "security_audit.SecurityAlert",
                        "GetUnresolvedAlertsBySeverity",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_alerts_by_type(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAlertsByTypeRequest>,
        ) -> Result<
            tonic::Response<super::GetAlertsByTypeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAlert/GetAlertsByType",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("security_audit.SecurityAlert", "GetAlertsByType"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_alerts_by_source(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAlertsBySourceRequest>,
        ) -> Result<
            tonic::Response<super::GetAlertsBySourceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAlert/GetAlertsBySource",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("security_audit.SecurityAlert", "GetAlertsBySource"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn resolve_security_alert(
            &mut self,
            request: impl tonic::IntoRequest<super::ResolveSecurityAlertRequest>,
        ) -> Result<
            tonic::Response<super::ResolveSecurityAlertResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAlert/ResolveSecurityAlert",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "security_audit.SecurityAlert",
                        "ResolveSecurityAlert",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_security_alerts_paginated(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSecurityAlertsPaginatedRequest>,
        ) -> Result<
            tonic::Response<super::GetSecurityAlertsPaginatedResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAlert/GetSecurityAlertsPaginated",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "security_audit.SecurityAlert",
                        "GetSecurityAlertsPaginated",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_critical_unresolved_alerts(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCriticalUnresolvedAlertsRequest>,
        ) -> Result<
            tonic::Response<super::GetCriticalUnresolvedAlertsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAlert/GetCriticalUnresolvedAlerts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "security_audit.SecurityAlert",
                        "GetCriticalUnresolvedAlerts",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_security_alert(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteSecurityAlertRequest>,
        ) -> Result<
            tonic::Response<super::DeleteSecurityAlertResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAlert/DeleteSecurityAlert",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "security_audit.SecurityAlert",
                        "DeleteSecurityAlert",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_alert_statistics(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAlertStatisticsRequest>,
        ) -> Result<
            tonic::Response<super::GetAlertStatisticsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/security_audit.SecurityAlert/GetAlertStatistics",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("security_audit.SecurityAlert", "GetAlertStatistics"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod security_alert_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with SecurityAlertServer.
    #[async_trait]
    pub trait SecurityAlert: Send + Sync + 'static {
        async fn create_security_alert(
            &self,
            request: tonic::Request<super::CreateSecurityAlertRequest>,
        ) -> Result<
            tonic::Response<super::CreateSecurityAlertResponse>,
            tonic::Status,
        >;
        async fn create_security_alert_auto_id(
            &self,
            request: tonic::Request<super::CreateSecurityAlertAutoIdRequest>,
        ) -> Result<
            tonic::Response<super::CreateSecurityAlertAutoIdResponse>,
            tonic::Status,
        >;
        async fn get_security_alert(
            &self,
            request: tonic::Request<super::GetSecurityAlertRequest>,
        ) -> Result<
            tonic::Response<super::GetSecurityAlertResponse>,
            tonic::Status,
        >;
        async fn get_unresolved_alerts_by_severity(
            &self,
            request: tonic::Request<super::GetUnresolvedAlertsBySeverityRequest>,
        ) -> Result<
            tonic::Response<super::GetUnresolvedAlertsBySeverityResponse>,
            tonic::Status,
        >;
        async fn get_alerts_by_type(
            &self,
            request: tonic::Request<super::GetAlertsByTypeRequest>,
        ) -> Result<
            tonic::Response<super::GetAlertsByTypeResponse>,
            tonic::Status,
        >;
        async fn get_alerts_by_source(
            &self,
            request: tonic::Request<super::GetAlertsBySourceRequest>,
        ) -> Result<
            tonic::Response<super::GetAlertsBySourceResponse>,
            tonic::Status,
        >;
        async fn resolve_security_alert(
            &self,
            request: tonic::Request<super::ResolveSecurityAlertRequest>,
        ) -> Result<
            tonic::Response<super::ResolveSecurityAlertResponse>,
            tonic::Status,
        >;
        async fn get_security_alerts_paginated(
            &self,
            request: tonic::Request<super::GetSecurityAlertsPaginatedRequest>,
        ) -> Result<
            tonic::Response<super::GetSecurityAlertsPaginatedResponse>,
            tonic::Status,
        >;
        async fn get_critical_unresolved_alerts(
            &self,
            request: tonic::Request<super::GetCriticalUnresolvedAlertsRequest>,
        ) -> Result<
            tonic::Response<super::GetCriticalUnresolvedAlertsResponse>,
            tonic::Status,
        >;
        async fn delete_security_alert(
            &self,
            request: tonic::Request<super::DeleteSecurityAlertRequest>,
        ) -> Result<
            tonic::Response<super::DeleteSecurityAlertResponse>,
            tonic::Status,
        >;
        async fn get_alert_statistics(
            &self,
            request: tonic::Request<super::GetAlertStatisticsRequest>,
        ) -> Result<
            tonic::Response<super::GetAlertStatisticsResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct SecurityAlertServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> SecurityAlertServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> Service<http::Request<B>> for SecurityAlertServer<T>
    where
        T: SecurityAlert,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/security_audit.SecurityAlert/CreateSecurityAlert" => {
                    #[allow(non_camel_case_types)]
                    struct CreateSecurityAlertSvc<T: SecurityAlert>(pub Arc<T>);
                    impl<
                        T: SecurityAlert,
                    > tonic::server::UnaryService<super::CreateSecurityAlertRequest>
                    for CreateSecurityAlertSvc<T> {
                        type Response = super::CreateSecurityAlertResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateSecurityAlertRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAlert>::create_security_alert(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateSecurityAlertSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAlert/CreateSecurityAlertAutoId" => {
                    #[allow(non_camel_case_types)]
                    struct CreateSecurityAlertAutoIdSvc<T: SecurityAlert>(pub Arc<T>);
                    impl<
                        T: SecurityAlert,
                    > tonic::server::UnaryService<
                        super::CreateSecurityAlertAutoIdRequest,
                    > for CreateSecurityAlertAutoIdSvc<T> {
                        type Response = super::CreateSecurityAlertAutoIdResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::CreateSecurityAlertAutoIdRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAlert>::create_security_alert_auto_id(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateSecurityAlertAutoIdSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAlert/GetSecurityAlert" => {
                    #[allow(non_camel_case_types)]
                    struct GetSecurityAlertSvc<T: SecurityAlert>(pub Arc<T>);
                    impl<
                        T: SecurityAlert,
                    > tonic::server::UnaryService<super::GetSecurityAlertRequest>
                    for GetSecurityAlertSvc<T> {
                        type Response = super::GetSecurityAlertResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetSecurityAlertRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAlert>::get_security_alert(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSecurityAlertSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAlert/GetUnresolvedAlertsBySeverity" => {
                    #[allow(non_camel_case_types)]
                    struct GetUnresolvedAlertsBySeveritySvc<T: SecurityAlert>(
                        pub Arc<T>,
                    );
                    impl<
                        T: SecurityAlert,
                    > tonic::server::UnaryService<
                        super::GetUnresolvedAlertsBySeverityRequest,
                    > for GetUnresolvedAlertsBySeveritySvc<T> {
                        type Response = super::GetUnresolvedAlertsBySeverityResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetUnresolvedAlertsBySeverityRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAlert>::get_unresolved_alerts_by_severity(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetUnresolvedAlertsBySeveritySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAlert/GetAlertsByType" => {
                    #[allow(non_camel_case_types)]
                    struct GetAlertsByTypeSvc<T: SecurityAlert>(pub Arc<T>);
                    impl<
                        T: SecurityAlert,
                    > tonic::server::UnaryService<super::GetAlertsByTypeRequest>
                    for GetAlertsByTypeSvc<T> {
                        type Response = super::GetAlertsByTypeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetAlertsByTypeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAlert>::get_alerts_by_type(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetAlertsByTypeSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAlert/GetAlertsBySource" => {
                    #[allow(non_camel_case_types)]
                    struct GetAlertsBySourceSvc<T: SecurityAlert>(pub Arc<T>);
                    impl<
                        T: SecurityAlert,
                    > tonic::server::UnaryService<super::GetAlertsBySourceRequest>
                    for GetAlertsBySourceSvc<T> {
                        type Response = super::GetAlertsBySourceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetAlertsBySourceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAlert>::get_alerts_by_source(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetAlertsBySourceSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAlert/ResolveSecurityAlert" => {
                    #[allow(non_camel_case_types)]
                    struct ResolveSecurityAlertSvc<T: SecurityAlert>(pub Arc<T>);
                    impl<
                        T: SecurityAlert,
                    > tonic::server::UnaryService<super::ResolveSecurityAlertRequest>
                    for ResolveSecurityAlertSvc<T> {
                        type Response = super::ResolveSecurityAlertResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ResolveSecurityAlertRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAlert>::resolve_security_alert(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ResolveSecurityAlertSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAlert/GetSecurityAlertsPaginated" => {
                    #[allow(non_camel_case_types)]
                    struct GetSecurityAlertsPaginatedSvc<T: SecurityAlert>(pub Arc<T>);
                    impl<
                        T: SecurityAlert,
                    > tonic::server::UnaryService<
                        super::GetSecurityAlertsPaginatedRequest,
                    > for GetSecurityAlertsPaginatedSvc<T> {
                        type Response = super::GetSecurityAlertsPaginatedResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetSecurityAlertsPaginatedRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAlert>::get_security_alerts_paginated(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSecurityAlertsPaginatedSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAlert/GetCriticalUnresolvedAlerts" => {
                    #[allow(non_camel_case_types)]
                    struct GetCriticalUnresolvedAlertsSvc<T: SecurityAlert>(pub Arc<T>);
                    impl<
                        T: SecurityAlert,
                    > tonic::server::UnaryService<
                        super::GetCriticalUnresolvedAlertsRequest,
                    > for GetCriticalUnresolvedAlertsSvc<T> {
                        type Response = super::GetCriticalUnresolvedAlertsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetCriticalUnresolvedAlertsRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAlert>::get_critical_unresolved_alerts(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetCriticalUnresolvedAlertsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAlert/DeleteSecurityAlert" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteSecurityAlertSvc<T: SecurityAlert>(pub Arc<T>);
                    impl<
                        T: SecurityAlert,
                    > tonic::server::UnaryService<super::DeleteSecurityAlertRequest>
                    for DeleteSecurityAlertSvc<T> {
                        type Response = super::DeleteSecurityAlertResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteSecurityAlertRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAlert>::delete_security_alert(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteSecurityAlertSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/security_audit.SecurityAlert/GetAlertStatistics" => {
                    #[allow(non_camel_case_types)]
                    struct GetAlertStatisticsSvc<T: SecurityAlert>(pub Arc<T>);
                    impl<
                        T: SecurityAlert,
                    > tonic::server::UnaryService<super::GetAlertStatisticsRequest>
                    for GetAlertStatisticsSvc<T> {
                        type Response = super::GetAlertStatisticsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetAlertStatisticsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SecurityAlert>::get_alert_statistics(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetAlertStatisticsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for SecurityAlertServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "security_audit.SecurityAlert";
    impl<T> tonic::server::NamedService for SecurityAlertServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
