// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
/// admin user model
pub struct AdminUserModel {
    #[prost(string, tag = "1")]
    /// id
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    /// full name
    pub full_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    /// email
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    /// profile image 
    pub profile_image: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    /// is super admin
    pub is_super_admin: bool,
    #[prost(message, optional, tag = "6")]
    /// created at
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    /// updated at
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "8")]
    /// created by
    pub created_by: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    /// updated by
    pub updated_by: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "10")]
    /// roles
    pub roles: ::prost::alloc::vec::Vec<RoleModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// role model
pub struct RoleModel {
    #[prost(string, tag = "1")]
    /// id
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    /// name
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    /// identifier
    pub identifier: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "10")]
    /// permissions
    pub permissions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "6")]
    /// created at
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    /// updated at
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "8")]
    /// created by
    pub created_by: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    /// updated by
    pub updated_by: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// role option model
pub struct RoleOptionModel {
    #[prost(string, tag = "1")]
    /// label
    pub label: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    /// value
    pub value: ::prost::alloc::string::String,
}
/// Admin user paginate API
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AdminUserPaginateRequest {
    #[prost(int64, optional, tag = "1")]
    /// page
    pub page: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "2")]
    /// order
    pub order: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
/// admin user paginate response
pub struct AdminUserPaginateResponse {
    #[prost(bool, tag = "1")]
    /// bool
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    /// data
    pub data: ::core::option::Option<
        admin_user_paginate_response::AdminUserPaginateData,
    >,
}
/// Nested message and enum types in `AdminUserPaginateResponse`.
pub mod admin_user_paginate_response {
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
    /// admin user pagination
    pub struct AdminUserPagination {
        #[prost(int64, tag = "1")]
        /// total
        pub total: i64,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    /// admin user paginate data
    pub struct AdminUserPaginateData {
        #[prost(message, optional, tag = "1")]
        /// pagination
        pub pagination: ::core::option::Option<AdminUserPagination>,
        #[prost(message, repeated, tag = "2")]
        /// data
        pub data: ::prost::alloc::vec::Vec<super::AdminUserModel>,
    }
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// store admin user request
pub struct StoreAdminUserRequest {
    #[prost(string, tag = "1")]
    /// full name
    pub full_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    /// email
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    /// password
    pub password: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    /// confirm password
    pub confirm_password: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    /// is super admin
    pub is_super_admin: bool,
    #[prost(bytes = "vec", tag = "6")]
    /// profile image content
    pub profile_image_content: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "7")]
    /// profile image file name
    pub profile_image_file_name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
/// store admin user response
pub struct StoreAdminUserResponse {
    #[prost(bool, tag = "1")]
    /// status
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    /// data
    pub data: ::core::option::Option<AdminUserModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// get admin user request
pub struct GetAdminUserRequest {
    #[prost(string, tag = "1")]
    /// admin user id
    pub admin_user_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
/// get admin user response
pub struct GetAdminUserResponse {
    #[prost(bool, tag = "1")]
    /// status
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    /// data
    pub data: ::core::option::Option<AdminUserModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// update admin user request
pub struct UpdateAdminUserRequest {
    #[prost(string, tag = "1")]
    /// admin user id
    pub admin_user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    /// full name
    pub full_name: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    /// profile image content
    pub profile_image_content: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "4")]
    /// profile image file name
    pub profile_image_file_name: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "5")]
    /// role ids
    pub role_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "6")]
    /// is super admin
    pub is_super_admin: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
/// update admin user response
pub struct UpdateAdminUserResponse {
    #[prost(bool, tag = "1")]
    /// status
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    /// data
    pub data: ::core::option::Option<AdminUserModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// role paginate request
pub struct RolePaginateRequest {
    #[prost(int64, optional, tag = "1")]
    /// page
    pub page: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "2")]
    /// order
    pub order: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
/// role paginate response
pub struct RolePaginateResponse {
    #[prost(bool, tag = "1")]
    /// status
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    /// data
    pub data: ::core::option::Option<role_paginate_response::RolePaginateData>,
}
/// Nested message and enum types in `RolePaginateResponse`.
pub mod role_paginate_response {
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
    /// role pagination
    pub struct RolePagination {
        #[prost(int64, tag = "1")]
        /// total
        pub total: i64,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    /// role paginate data
    pub struct RolePaginateData {
        #[prost(message, optional, tag = "1")]
        /// pagination
        pub pagination: ::core::option::Option<RolePagination>,
        #[prost(message, repeated, tag = "2")]
        /// data
        pub data: ::prost::alloc::vec::Vec<super::RoleModel>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
/// role options response
pub struct RoleOptionResponse {
    #[prost(bool, tag = "1")]
    /// status
    pub status: bool,
    #[prost(message, repeated, tag = "2")]
    /// data
    pub data: ::prost::alloc::vec::Vec<RoleOptionModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// store role request
pub struct StoreRoleRequest {
    #[prost(string, tag = "1")]
    /// name
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    /// identifier
    pub identifier: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    /// permissions
    pub permissions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// store role response
pub struct StoreRoleResponse {
    #[prost(bool, tag = "1")]
    /// status
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    /// data
    pub data: ::core::option::Option<RoleModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// get role request
pub struct GetRoleRequest {
    #[prost(string, tag = "1")]
    /// role id
    pub role_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// get role response
pub struct GetRoleResponse {
    #[prost(bool, tag = "1")]
    /// status
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    /// data
    pub data: ::core::option::Option<RoleModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// update role request
pub struct UpdateRoleRequest {
    #[prost(string, tag = "1")]
    /// role id
    pub role_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    /// name
    pub name: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    /// permissions
    pub permissions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// update role request
pub struct UpdateRoleResponse {
    #[prost(bool, tag = "1")]
    /// status
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    /// data
    pub data: ::core::option::Option<RoleModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// put role identifier request
pub struct PutRoleIdentifierRequest {
    #[prost(string, tag = "1")]
    /// role id
    pub role_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    /// identifier
    pub identifier: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// put role identifier response
pub struct PutRoleIdentifierResponse {
    #[prost(bool, tag = "1")]
    /// status
    pub status: bool,
    #[prost(message, optional, tag = "2")]
    /// data
    pub data: ::core::option::Option<RoleModel>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// delete role request
pub struct DeleteRoleRequest {
    #[prost(string, tag = "1")]
    /// role id
    pub role_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
/// delete role response
pub struct DeleteRoleResponse {
    #[prost(bool, tag = "1")]
    /// status
    pub status: bool,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// delete admin user request
pub struct DeleteAdminUserRequest {
    #[prost(string, tag = "1")]
    /// admin user id
    pub admin_user_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
/// delete admin user response
pub struct DeleteAdminUserResponse {
    #[prost(bool, tag = "1")]
    /// status
    pub status: bool,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
/// change admin user password request
pub struct ChangeAdminUserPasswordRequest {
    #[prost(string, tag = "1")]
    /// password
    pub password: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    /// new password
    pub new_password: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    /// confirm password
    pub confirm_password: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
/// change admin user password response
pub struct ChangeAdminUserPasswordResponse {
    #[prost(bool, tag = "1")]
    /// status
    pub status: bool,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
/// role option request
pub struct RoleOptionRequest {}
/// Generated client implementations.
pub mod admin_user_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct AdminUserClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl AdminUserClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> AdminUserClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AdminUserClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            AdminUserClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn paginate(
            &mut self,
            request: impl tonic::IntoRequest<super::AdminUserPaginateRequest>,
        ) -> Result<
            tonic::Response<super::AdminUserPaginateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/admin_user.AdminUser/Paginate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("admin_user.AdminUser", "Paginate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn store_admin_user(
            &mut self,
            request: impl tonic::IntoRequest<super::StoreAdminUserRequest>,
        ) -> Result<
            tonic::Response<super::StoreAdminUserResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/admin_user.AdminUser/StoreAdminUser",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("admin_user.AdminUser", "StoreAdminUser"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_admin_user(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAdminUserRequest>,
        ) -> Result<
            tonic::Response<super::GetAdminUserResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/admin_user.AdminUser/GetAdminUser",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("admin_user.AdminUser", "GetAdminUser"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_admin_user(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateAdminUserRequest>,
        ) -> Result<
            tonic::Response<super::UpdateAdminUserResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/admin_user.AdminUser/UpdateAdminUser",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("admin_user.AdminUser", "UpdateAdminUser"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn role_paginate(
            &mut self,
            request: impl tonic::IntoRequest<super::RolePaginateRequest>,
        ) -> Result<
            tonic::Response<super::RolePaginateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/admin_user.AdminUser/RolePaginate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("admin_user.AdminUser", "RolePaginate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn role_option(
            &mut self,
            request: impl tonic::IntoRequest<super::RoleOptionRequest>,
        ) -> Result<
            tonic::Response<super::RoleOptionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/admin_user.AdminUser/RoleOption",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("admin_user.AdminUser", "RoleOption"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn store_role(
            &mut self,
            request: impl tonic::IntoRequest<super::StoreRoleRequest>,
        ) -> Result<
            tonic::Response<super::StoreRoleResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/admin_user.AdminUser/StoreRole",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("admin_user.AdminUser", "StoreRole"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_role(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRoleRequest>,
        ) -> Result<
            tonic::Response<super::GetRoleResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/admin_user.AdminUser/GetRole",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("admin_user.AdminUser", "GetRole"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_role(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateRoleRequest>,
        ) -> Result<
            tonic::Response<super::UpdateRoleResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/admin_user.AdminUser/UpdateRole",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("admin_user.AdminUser", "UpdateRole"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn put_role_identifier(
            &mut self,
            request: impl tonic::IntoRequest<super::PutRoleIdentifierRequest>,
        ) -> Result<
            tonic::Response<super::PutRoleIdentifierResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/admin_user.AdminUser/PutRoleIdentifier",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("admin_user.AdminUser", "PutRoleIdentifier"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_role(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteRoleRequest>,
        ) -> Result<
            tonic::Response<super::DeleteRoleResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/admin_user.AdminUser/DeleteRole",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("admin_user.AdminUser", "DeleteRole"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_admin_user(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteAdminUserRequest>,
        ) -> Result<
            tonic::Response<super::DeleteAdminUserResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/admin_user.AdminUser/DeleteAdminUser",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("admin_user.AdminUser", "DeleteAdminUser"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_admin_user_password(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeAdminUserPasswordRequest>,
        ) -> Result<
            tonic::Response<super::ChangeAdminUserPasswordResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/admin_user.AdminUser/ChangeAdminUserPassword",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("admin_user.AdminUser", "ChangeAdminUserPassword"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod admin_user_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with AdminUserServer.
    #[async_trait]
    pub trait AdminUser: Send + Sync + 'static {
        async fn paginate(
            &self,
            request: tonic::Request<super::AdminUserPaginateRequest>,
        ) -> Result<
            tonic::Response<super::AdminUserPaginateResponse>,
            tonic::Status,
        >;
        async fn store_admin_user(
            &self,
            request: tonic::Request<super::StoreAdminUserRequest>,
        ) -> Result<
            tonic::Response<super::StoreAdminUserResponse>,
            tonic::Status,
        >;
        async fn get_admin_user(
            &self,
            request: tonic::Request<super::GetAdminUserRequest>,
        ) -> Result<
            tonic::Response<super::GetAdminUserResponse>,
            tonic::Status,
        >;
        async fn update_admin_user(
            &self,
            request: tonic::Request<super::UpdateAdminUserRequest>,
        ) -> Result<
            tonic::Response<super::UpdateAdminUserResponse>,
            tonic::Status,
        >;
        async fn role_paginate(
            &self,
            request: tonic::Request<super::RolePaginateRequest>,
        ) -> Result<
            tonic::Response<super::RolePaginateResponse>,
            tonic::Status,
        >;
        async fn role_option(
            &self,
            request: tonic::Request<super::RoleOptionRequest>,
        ) -> Result<
            tonic::Response<super::RoleOptionResponse>,
            tonic::Status,
        >;
        async fn store_role(
            &self,
            request: tonic::Request<super::StoreRoleRequest>,
        ) -> Result<
            tonic::Response<super::StoreRoleResponse>,
            tonic::Status,
        >;
        async fn get_role(
            &self,
            request: tonic::Request<super::GetRoleRequest>,
        ) -> Result<tonic::Response<super::GetRoleResponse>, tonic::Status>;
        async fn update_role(
            &self,
            request: tonic::Request<super::UpdateRoleRequest>,
        ) -> Result<
            tonic::Response<super::UpdateRoleResponse>,
            tonic::Status,
        >;
        async fn put_role_identifier(
            &self,
            request: tonic::Request<super::PutRoleIdentifierRequest>,
        ) -> Result<
            tonic::Response<super::PutRoleIdentifierResponse>,
            tonic::Status,
        >;
        async fn delete_role(
            &self,
            request: tonic::Request<super::DeleteRoleRequest>,
        ) -> Result<
            tonic::Response<super::DeleteRoleResponse>,
            tonic::Status,
        >;
        async fn delete_admin_user(
            &self,
            request: tonic::Request<super::DeleteAdminUserRequest>,
        ) -> Result<
            tonic::Response<super::DeleteAdminUserResponse>,
            tonic::Status,
        >;
        async fn change_admin_user_password(
            &self,
            request: tonic::Request<super::ChangeAdminUserPasswordRequest>,
        ) -> Result<
            tonic::Response<super::ChangeAdminUserPasswordResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct AdminUserServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> AdminUserServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> Service<http::Request<B>> for AdminUserServer<T>
    where
        T: AdminUser,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/admin_user.AdminUser/Paginate" => {
                    #[allow(non_camel_case_types)]
                    struct PaginateSvc<T: AdminUser>(pub Arc<T>);
                    impl<
                        T: AdminUser,
                    > tonic::server::UnaryService<super::AdminUserPaginateRequest>
                    for PaginateSvc<T> {
                        type Response = super::AdminUserPaginateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AdminUserPaginateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AdminUser>::paginate(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PaginateSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/admin_user.AdminUser/StoreAdminUser" => {
                    #[allow(non_camel_case_types)]
                    struct StoreAdminUserSvc<T: AdminUser>(pub Arc<T>);
                    impl<
                        T: AdminUser,
                    > tonic::server::UnaryService<super::StoreAdminUserRequest>
                    for StoreAdminUserSvc<T> {
                        type Response = super::StoreAdminUserResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StoreAdminUserRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AdminUser>::store_admin_user(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StoreAdminUserSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/admin_user.AdminUser/GetAdminUser" => {
                    #[allow(non_camel_case_types)]
                    struct GetAdminUserSvc<T: AdminUser>(pub Arc<T>);
                    impl<
                        T: AdminUser,
                    > tonic::server::UnaryService<super::GetAdminUserRequest>
                    for GetAdminUserSvc<T> {
                        type Response = super::GetAdminUserResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetAdminUserRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AdminUser>::get_admin_user(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetAdminUserSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/admin_user.AdminUser/UpdateAdminUser" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateAdminUserSvc<T: AdminUser>(pub Arc<T>);
                    impl<
                        T: AdminUser,
                    > tonic::server::UnaryService<super::UpdateAdminUserRequest>
                    for UpdateAdminUserSvc<T> {
                        type Response = super::UpdateAdminUserResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateAdminUserRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AdminUser>::update_admin_user(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateAdminUserSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/admin_user.AdminUser/RolePaginate" => {
                    #[allow(non_camel_case_types)]
                    struct RolePaginateSvc<T: AdminUser>(pub Arc<T>);
                    impl<
                        T: AdminUser,
                    > tonic::server::UnaryService<super::RolePaginateRequest>
                    for RolePaginateSvc<T> {
                        type Response = super::RolePaginateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RolePaginateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AdminUser>::role_paginate(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RolePaginateSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/admin_user.AdminUser/RoleOption" => {
                    #[allow(non_camel_case_types)]
                    struct RoleOptionSvc<T: AdminUser>(pub Arc<T>);
                    impl<
                        T: AdminUser,
                    > tonic::server::UnaryService<super::RoleOptionRequest>
                    for RoleOptionSvc<T> {
                        type Response = super::RoleOptionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RoleOptionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AdminUser>::role_option(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RoleOptionSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/admin_user.AdminUser/StoreRole" => {
                    #[allow(non_camel_case_types)]
                    struct StoreRoleSvc<T: AdminUser>(pub Arc<T>);
                    impl<
                        T: AdminUser,
                    > tonic::server::UnaryService<super::StoreRoleRequest>
                    for StoreRoleSvc<T> {
                        type Response = super::StoreRoleResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StoreRoleRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AdminUser>::store_role(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StoreRoleSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/admin_user.AdminUser/GetRole" => {
                    #[allow(non_camel_case_types)]
                    struct GetRoleSvc<T: AdminUser>(pub Arc<T>);
                    impl<T: AdminUser> tonic::server::UnaryService<super::GetRoleRequest>
                    for GetRoleSvc<T> {
                        type Response = super::GetRoleResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetRoleRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AdminUser>::get_role(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetRoleSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/admin_user.AdminUser/UpdateRole" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateRoleSvc<T: AdminUser>(pub Arc<T>);
                    impl<
                        T: AdminUser,
                    > tonic::server::UnaryService<super::UpdateRoleRequest>
                    for UpdateRoleSvc<T> {
                        type Response = super::UpdateRoleResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateRoleRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AdminUser>::update_role(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateRoleSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/admin_user.AdminUser/PutRoleIdentifier" => {
                    #[allow(non_camel_case_types)]
                    struct PutRoleIdentifierSvc<T: AdminUser>(pub Arc<T>);
                    impl<
                        T: AdminUser,
                    > tonic::server::UnaryService<super::PutRoleIdentifierRequest>
                    for PutRoleIdentifierSvc<T> {
                        type Response = super::PutRoleIdentifierResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PutRoleIdentifierRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AdminUser>::put_role_identifier(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PutRoleIdentifierSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/admin_user.AdminUser/DeleteRole" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteRoleSvc<T: AdminUser>(pub Arc<T>);
                    impl<
                        T: AdminUser,
                    > tonic::server::UnaryService<super::DeleteRoleRequest>
                    for DeleteRoleSvc<T> {
                        type Response = super::DeleteRoleResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteRoleRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AdminUser>::delete_role(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteRoleSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/admin_user.AdminUser/DeleteAdminUser" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteAdminUserSvc<T: AdminUser>(pub Arc<T>);
                    impl<
                        T: AdminUser,
                    > tonic::server::UnaryService<super::DeleteAdminUserRequest>
                    for DeleteAdminUserSvc<T> {
                        type Response = super::DeleteAdminUserResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteAdminUserRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AdminUser>::delete_admin_user(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteAdminUserSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/admin_user.AdminUser/ChangeAdminUserPassword" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeAdminUserPasswordSvc<T: AdminUser>(pub Arc<T>);
                    impl<
                        T: AdminUser,
                    > tonic::server::UnaryService<super::ChangeAdminUserPasswordRequest>
                    for ChangeAdminUserPasswordSvc<T> {
                        type Response = super::ChangeAdminUserPasswordResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ChangeAdminUserPasswordRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AdminUser>::change_admin_user_password(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeAdminUserPasswordSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for AdminUserServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "admin_user.AdminUser";
    impl<T> tonic::server::NamedService for AdminUserServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
