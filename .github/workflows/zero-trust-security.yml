name: Zero Trust Security Validation

on:
  push:
    branches: [ main, develop, feature/ldap-authentication ]
  pull_request:
    branches: [ main, develop ]
  workflow_call:
    # Allow this workflow to be called by other workflows
  schedule:
    # Run security tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      security_level:
        description: 'Security check level'
        required: true
        default: 'comprehensive'
        type: choice
        options:
        - basic
        - comprehensive
        - paranoid

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

jobs:
  security-regression-tests:
    name: Security Regression Prevention
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Security Regression Tests
        run: |
          echo "Running security regression prevention tests..."
          cargo test security_regression_tests --verbose -- --nocapture
          if [ $? -ne 0 ]; then
            echo "❌ CRITICAL: Security regression tests failed!"
            echo "This indicates that security measures have been weakened or disabled."
            echo "All security regression tests must pass before merging."
            exit 1
          fi
          echo "✅ Security regression tests passed"

      - name: Run Zero Trust Security Tests
        run: |
          echo "Running zero trust security validation..."
          cargo test zero_trust_security_tests --verbose -- --nocapture
          if [ $? -ne 0 ]; then
            echo "❌ CRITICAL: Zero trust security tests failed!"
            echo "This indicates that zero trust principles are not being enforced."
            exit 1
          fi
          echo "✅ Zero trust security tests passed"

      - name: Run Security Property Tests
        run: |
          echo "Running security property-based tests..."
          cargo test security_property_tests --verbose -- --nocapture
          if [ $? -ne 0 ]; then
            echo "❌ CRITICAL: Security property tests failed!"
            echo "This indicates that security properties are not holding."
            exit 1
          fi
          echo "✅ Security property tests passed"

  security-invariant-validation:
    name: Security Invariant Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Validate Security Invariants
        run: |
          echo "Validating all security invariants..."
          cargo test test_all_security_invariants_hold --verbose -- --nocapture
          if [ $? -ne 0 ]; then
            echo "❌ CRITICAL: Security invariants validation failed!"
            echo "One or more security invariants are not holding."
            echo "This is a critical security issue that must be fixed immediately."
            exit 1
          fi
          echo "✅ All security invariants are holding"

      - name: Test Attack Vector Prevention
        run: |
          echo "Testing comprehensive attack vector prevention..."
          cargo test test_comprehensive_attack_vector_prevention --verbose -- --nocapture
          if [ $? -ne 0 ]; then
            echo "❌ CRITICAL: Attack vector prevention failed!"
            echo "One or more attack vectors are not being prevented."
            exit 1
          fi
          echo "✅ All known attack vectors are being prevented"

  timing-attack-prevention:
    name: Timing Attack Prevention Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Timing Attack Tests
        run: |
          echo "Running timing attack prevention tests..."
          cargo test timing_attack_tests --verbose -- --nocapture
          if [ $? -ne 0 ]; then
            echo "❌ CRITICAL: Timing attack prevention failed!"
            echo "The system is vulnerable to timing attacks."
            exit 1
          fi
          echo "✅ Timing attack prevention is working"

      - name: Run Zero Trust Timing Validation
        run: |
          echo "Running zero trust timing validation..."
          cargo test test_timing_attack_prevention_zero_trust --verbose -- --nocapture
          if [ $? -ne 0 ]; then
            echo "❌ CRITICAL: Zero trust timing validation failed!"
            exit 1
          fi
          echo "✅ Zero trust timing validation passed"

  security-monitoring-validation:
    name: Security Monitoring Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Test Security Monitoring
        run: |
          echo "Testing security monitoring system..."
          cargo test test_security_monitoring_zero_trust --verbose -- --nocapture
          if [ $? -ne 0 ]; then
            echo "❌ CRITICAL: Security monitoring validation failed!"
            echo "Security threats may not be detected properly."
            exit 1
          fi
          echo "✅ Security monitoring is working correctly"

      - name: Test Audit Logging
        run: |
          echo "Testing security audit logging..."
          cargo test test_audit_logging_zero_trust --verbose -- --nocapture
          if [ $? -ne 0 ]; then
            echo "❌ CRITICAL: Audit logging validation failed!"
            echo "Security events may not be logged properly."
            exit 1
          fi
          echo "✅ Security audit logging is working correctly"

  security-health-check:
    name: Complete Security Health Check
    runs-on: ubuntu-latest
    needs: [security-regression-tests, security-invariant-validation, timing-attack-prevention, security-monitoring-validation]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Complete Security Framework Validation
        run: |
          echo "Running complete security framework validation..."
          cargo test test_complete_security_framework_validation --verbose -- --nocapture
          if [ $? -ne 0 ]; then
            echo "❌ CRITICAL: Complete security framework validation failed!"
            echo "The overall security framework is not functioning correctly."
            exit 1
          fi
          echo "✅ Complete security framework validation passed"

      - name: Generate Security Report
        run: |
          echo "Generating security validation report..."
          echo "# Security Validation Report" > security_report.md
          echo "Generated on: $(date)" >> security_report.md
          echo "" >> security_report.md
          echo "## Test Results" >> security_report.md
          echo "- ✅ Security Regression Tests: PASSED" >> security_report.md
          echo "- ✅ Security Invariant Validation: PASSED" >> security_report.md
          echo "- ✅ Timing Attack Prevention: PASSED" >> security_report.md
          echo "- ✅ Security Monitoring: PASSED" >> security_report.md
          echo "- ✅ Complete Framework Validation: PASSED" >> security_report.md
          echo "" >> security_report.md
          echo "## Security Status" >> security_report.md
          echo "🟢 **ALL SECURITY MEASURES ARE FUNCTIONING CORRECTLY**" >> security_report.md
          echo "" >> security_report.md
          echo "The zero trust security framework is operational and all" >> security_report.md
          echo "security measures are preventing known attack vectors." >> security_report.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-validation-report
          path: security_report.md

  security-failure-notification:
    name: Security Failure Notification
    runs-on: ubuntu-latest
    needs: [security-regression-tests, security-invariant-validation, timing-attack-prevention, security-monitoring-validation, security-health-check]
    if: failure()
    steps:
      - name: Security Failure Alert
        run: |
          echo "🚨 CRITICAL SECURITY ALERT 🚨"
          echo ""
          echo "One or more security validation tests have FAILED."
          echo "This indicates a potential security vulnerability or"
          echo "that security measures have been weakened."
          echo ""
          echo "IMMEDIATE ACTION REQUIRED:"
          echo "1. Do NOT merge this code"
          echo "2. Review all security-related changes"
          echo "3. Run security tests locally"
          echo "4. Fix all security issues before proceeding"
          echo ""
          echo "Security is non-negotiable. All security tests must pass."
          exit 1

  enhanced-security-audit:
    name: Enhanced Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-security-
            ${{ runner.os }}-cargo-

      - name: Install security tools
        run: |
          cargo install cargo-audit --features=fix
          cargo install cargo-deny
          cargo install cargo-outdated
          cargo install cargo-geiger

      - name: Run comprehensive security audit
        run: |
          echo "🔒 Running comprehensive security audit..."
          cargo audit --config audit.toml --format json --output security-audit-report.json
          if [ $? -ne 0 ]; then
            echo "❌ CRITICAL: Security vulnerabilities detected!"
            exit 1
          fi
          echo "✅ No security vulnerabilities found"

      - name: Run dependency policy checks
        run: |
          echo "📋 Running dependency policy checks..."
          cargo deny check
          if [ $? -ne 0 ]; then
            echo "❌ CRITICAL: Dependency policy violations detected!"
            exit 1
          fi
          echo "✅ All dependency policies passed"

      - name: Check for outdated dependencies
        run: |
          echo "📅 Checking for outdated dependencies..."
          cargo outdated --exit-code 1 || echo "⚠️ Some dependencies are outdated"
        continue-on-error: true

      - name: Run unsafe code detection
        run: |
          echo "🔍 Running unsafe code detection..."
          cargo geiger --format GitHubMarkdown --output-file security-geiger-report.md
          if grep -q "unsafe" security-geiger-report.md; then
            echo "⚠️ Unsafe code detected - review required"
          else
            echo "✅ No unsafe code detected"
          fi
        continue-on-error: true

      - name: Run security lints
        run: |
          echo "🔧 Running security-focused lints..."
          cargo clippy --profile release-secure --features security-hardened -- \
            -W clippy::integer_arithmetic \
            -W clippy::panic \
            -W clippy::unwrap_used \
            -W clippy::expect_used \
            -W clippy::indexing_slicing \
            -W clippy::integer_division \
            -W clippy::modulo_arithmetic \
            -W clippy::as_conversions \
            -W clippy::cast_lossless \
            -W clippy::cast_possible_truncation \
            -W clippy::cast_possible_wrap \
            -W clippy::cast_precision_loss \
            -W clippy::cast_sign_loss \
            -W clippy::float_arithmetic

      - name: Build with security hardening
        run: |
          echo "🛡️ Building with security hardening..."
          cargo build --profile release-secure --features security-hardened
          echo "✅ Security-hardened build completed"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: enhanced-security-reports
          path: |
            security-audit-report.json
            security-geiger-report.md
